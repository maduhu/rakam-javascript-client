/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'client.model/EventList', 'client.model/SuccessMessage', 'client.model/BulkEventRemote', 'client.model/Event', 'client.model/CommitBulkEvents', 'client.model/ErrorMessage'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../client.model/EventList'), require('../client.model/SuccessMessage'), require('../client.model/BulkEventRemote'), require('../client.model/Event'), require('../client.model/CommitBulkEvents'), require('../client.model/ErrorMessage'));
  } else {
    // Browser globals (root is window)
    if (!root.RakamClient) {
      root.RakamClient = {};
    }
    root.RakamClient.CollectApi = factory(root.RakamClient.ApiClient, root.RakamClient.EventList, root.RakamClient.SuccessMessage, root.RakamClient.BulkEventRemote, root.RakamClient.Event, root.RakamClient.CommitBulkEvents, root.RakamClient.ErrorMessage);
  }
}(this, function(ApiClient, EventList, SuccessMessage, BulkEventRemote, Event, CommitBulkEvents, ErrorMessage) {
  'use strict';

  /**
   * Collect service.
   * @module client.api/CollectApi
   * @version 0.5
   */

  /**
   * Constructs a new CollectApi. 
   * @alias module:client.api/CollectApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the batchEvents operation.
     * @callback module:client.api/CollectApi~batchEventsCallback
     * @param {String} error Error message, if any.
     * @param {'Integer'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collect multiple events
     * Returns 1 if the events are collected.
     * @param {module:client.model/EventList} eventList 
     * @param {module:client.api/CollectApi~batchEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {'Integer'}
     */
    this.batchEvents = function(eventList, callback) {
      var postBody = eventList;

      // verify the required parameter 'eventList' is set
      if (eventList == undefined || eventList == null) {
        throw "Missing the required parameter 'eventList' when calling batchEvents";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Integer';

      return this.apiClient.callApi(
        '/event/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkEvents operation.
     * @callback module:client.api/CollectApi~bulkEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:client.model/SuccessMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collect Bulk events
     * Bulk API requires master_key as api key and designed to handle large value of data. The endpoint also accepts application/avro and text/csv formats. You need need to set &#39;collection&#39; and &#39;master_key&#39; query parameters if the content-type is not application/json.
     * @param {module:client.model/EventList} eventList 
     * @param {module:client.api/CollectApi~bulkEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:client.model/SuccessMessage}
     */
    this.bulkEvents = function(eventList, callback) {
      var postBody = eventList;

      // verify the required parameter 'eventList' is set
      if (eventList == undefined || eventList == null) {
        throw "Missing the required parameter 'eventList' when calling bulkEvents";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessMessage;

      return this.apiClient.callApi(
        '/event/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkEventsRemote operation.
     * @callback module:client.api/CollectApi~bulkEventsRemoteCallback
     * @param {String} error Error message, if any.
     * @param {'Integer'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collect bulk events from remote
     * 
     * @param {module:client.model/BulkEventRemote} bulkEventRemote 
     * @param {module:client.api/CollectApi~bulkEventsRemoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {'Integer'}
     */
    this.bulkEventsRemote = function(bulkEventRemote, callback) {
      var postBody = bulkEventRemote;

      // verify the required parameter 'bulkEventRemote' is set
      if (bulkEventRemote == undefined || bulkEventRemote == null) {
        throw "Missing the required parameter 'bulkEventRemote' when calling bulkEventsRemote";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Integer';

      return this.apiClient.callApi(
        '/event/bulk/remote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the collectEvent operation.
     * @callback module:client.api/CollectApi~collectEventCallback
     * @param {String} error Error message, if any.
     * @param {'Integer'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collect event
     * 
     * @param {module:client.model/Event} event 
     * @param {module:client.api/CollectApi~collectEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {'Integer'}
     */
    this.collectEvent = function(event, callback) {
      var postBody = event;

      // verify the required parameter 'event' is set
      if (event == undefined || event == null) {
        throw "Missing the required parameter 'event' when calling collectEvent";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Integer';

      return this.apiClient.callApi(
        '/event/collect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the commitBulkEvents operation.
     * @callback module:client.api/CollectApi~commitBulkEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:client.model/SuccessMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commit Bulk events
     * 
     * @param {module:client.model/CommitBulkEvents} commitBulkEvents 
     * @param {module:client.api/CollectApi~commitBulkEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:client.model/SuccessMessage}
     */
    this.commitBulkEvents = function(commitBulkEvents, callback) {
      var postBody = commitBulkEvents;

      // verify the required parameter 'commitBulkEvents' is set
      if (commitBulkEvents == undefined || commitBulkEvents == null) {
        throw "Missing the required parameter 'commitBulkEvents' when calling commitBulkEvents";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['master_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessMessage;

      return this.apiClient.callApi(
        '/event/bulk/commit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
