/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'client.model/ContinuousQuery', 'client.model/SuccessMessage', 'client.model/ErrorMessage', 'client.model/ContinuousQueryDeleteQuery', 'client.model/ContinuousQueryGetQuery', 'client.model/Collection', 'client.model/ContinuousQueryGetSchemaOfQuery', 'client.model/ContinuousQueryTestQuery'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../client.model/ContinuousQuery'), require('../client.model/SuccessMessage'), require('../client.model/ErrorMessage'), require('../client.model/ContinuousQueryDeleteQuery'), require('../client.model/ContinuousQueryGetQuery'), require('../client.model/Collection'), require('../client.model/ContinuousQueryGetSchemaOfQuery'), require('../client.model/ContinuousQueryTestQuery'));
  } else {
    // Browser globals (root is window)
    if (!root.RakamClient) {
      root.RakamClient = {};
    }
    root.RakamClient.ContinuousqueryApi = factory(root.RakamClient.ApiClient, root.RakamClient.ContinuousQuery, root.RakamClient.SuccessMessage, root.RakamClient.ErrorMessage, root.RakamClient.ContinuousQueryDeleteQuery, root.RakamClient.ContinuousQueryGetQuery, root.RakamClient.Collection, root.RakamClient.ContinuousQueryGetSchemaOfQuery, root.RakamClient.ContinuousQueryTestQuery);
  }
}(this, function(ApiClient, ContinuousQuery, SuccessMessage, ErrorMessage, ContinuousQueryDeleteQuery, ContinuousQueryGetQuery, Collection, ContinuousQueryGetSchemaOfQuery, ContinuousQueryTestQuery) {
  'use strict';

  /**
   * Continuousquery service.
   * @module client.api/ContinuousqueryApi
   * @version 0.5
   */

  /**
   * Constructs a new ContinuousqueryApi. 
   * @alias module:client.api/ContinuousqueryApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createQuery operation.
     * @callback module:client.api/ContinuousqueryApi~createQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:client.model/SuccessMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create stream
     * Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.
     * @param {module:client.model/ContinuousQuery} continuousQuery 
     * @param {module:client.api/ContinuousqueryApi~createQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:client.model/SuccessMessage}
     */
    this.createQuery = function(continuousQuery, callback) {
      var postBody = continuousQuery;

      // verify the required parameter 'continuousQuery' is set
      if (continuousQuery == undefined || continuousQuery == null) {
        throw "Missing the required parameter 'continuousQuery' when calling createQuery";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['master_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessMessage;

      return this.apiClient.callApi(
        '/continuous-query/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteQuery operation.
     * @callback module:client.api/ContinuousqueryApi~deleteQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:client.model/SuccessMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete stream
     * 
     * @param {module:client.model/ContinuousQueryDeleteQuery} continuousQueryDeleteQuery 
     * @param {module:client.api/ContinuousqueryApi~deleteQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:client.model/SuccessMessage}
     */
    this.deleteQuery = function(continuousQueryDeleteQuery, callback) {
      var postBody = continuousQueryDeleteQuery;

      // verify the required parameter 'continuousQueryDeleteQuery' is set
      if (continuousQueryDeleteQuery == undefined || continuousQueryDeleteQuery == null) {
        throw "Missing the required parameter 'continuousQueryDeleteQuery' when calling deleteQuery";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['master_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessMessage;

      return this.apiClient.callApi(
        '/continuous-query/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuery operation.
     * @callback module:client.api/ContinuousqueryApi~getQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:client.model/ContinuousQuery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get continuous query
     * 
     * @param {module:client.model/ContinuousQueryGetQuery} continuousQueryGetQuery 
     * @param {module:client.api/ContinuousqueryApi~getQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:client.model/ContinuousQuery}
     */
    this.getQuery = function(continuousQueryGetQuery, callback) {
      var postBody = continuousQueryGetQuery;

      // verify the required parameter 'continuousQueryGetQuery' is set
      if (continuousQueryGetQuery == undefined || continuousQueryGetQuery == null) {
        throw "Missing the required parameter 'continuousQueryGetQuery' when calling getQuery";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['read_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContinuousQuery;

      return this.apiClient.callApi(
        '/continuous-query/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchemaOfQuery operation.
     * @callback module:client.api/ContinuousqueryApi~getSchemaOfQueryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:client.model/Collection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get query schema
     * 
     * @param {module:client.model/ContinuousQueryGetSchemaOfQuery} continuousQueryGetSchemaOfQuery 
     * @param {module:client.api/ContinuousqueryApi~getSchemaOfQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:client.model/Collection>}
     */
    this.getSchemaOfQuery = function(continuousQueryGetSchemaOfQuery, callback) {
      var postBody = continuousQueryGetSchemaOfQuery;

      // verify the required parameter 'continuousQueryGetSchemaOfQuery' is set
      if (continuousQueryGetSchemaOfQuery == undefined || continuousQueryGetSchemaOfQuery == null) {
        throw "Missing the required parameter 'continuousQueryGetSchemaOfQuery' when calling getSchemaOfQuery";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['read_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Collection];

      return this.apiClient.callApi(
        '/continuous-query/schema', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listQueries operation.
     * @callback module:client.api/ContinuousqueryApi~listQueriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:client.model/ContinuousQuery>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List queries
     * 
     * @param {module:client.api/ContinuousqueryApi~listQueriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:client.model/ContinuousQuery>}
     */
    this.listQueries = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['read_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ContinuousQuery];

      return this.apiClient.callApi(
        '/continuous-query/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testQuery operation.
     * @callback module:client.api/ContinuousqueryApi~testQueryCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test continuous query
     * 
     * @param {module:client.model/ContinuousQueryTestQuery} continuousQueryTestQuery 
     * @param {module:client.api/ContinuousqueryApi~testQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {'Boolean'}
     */
    this.testQuery = function(continuousQueryTestQuery, callback) {
      var postBody = continuousQueryTestQuery;

      // verify the required parameter 'continuousQueryTestQuery' is set
      if (continuousQueryTestQuery == undefined || continuousQueryTestQuery == null) {
        throw "Missing the required parameter 'continuousQueryTestQuery' when calling testQuery";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['read_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/continuous-query/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
