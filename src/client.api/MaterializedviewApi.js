/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'client.model/SuccessMessage', 'client.model/MaterializedView', 'client.model/ErrorMessage', 'client.model/MaterializedViewDeleteView', 'client.model/MaterializedViewSchema', 'client.model/MaterializedViewGetSchemaOfView', 'client.model/MaterializedViewGetView'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../client.model/SuccessMessage'), require('../client.model/MaterializedView'), require('../client.model/ErrorMessage'), require('../client.model/MaterializedViewDeleteView'), require('../client.model/MaterializedViewSchema'), require('../client.model/MaterializedViewGetSchemaOfView'), require('../client.model/MaterializedViewGetView'));
  } else {
    // Browser globals (root is window)
    if (!root.RakamClient) {
      root.RakamClient = {};
    }
    root.RakamClient.MaterializedviewApi = factory(root.RakamClient.ApiClient, root.RakamClient.SuccessMessage, root.RakamClient.MaterializedView, root.RakamClient.ErrorMessage, root.RakamClient.MaterializedViewDeleteView, root.RakamClient.MaterializedViewSchema, root.RakamClient.MaterializedViewGetSchemaOfView, root.RakamClient.MaterializedViewGetView);
  }
}(this, function(ApiClient, SuccessMessage, MaterializedView, ErrorMessage, MaterializedViewDeleteView, MaterializedViewSchema, MaterializedViewGetSchemaOfView, MaterializedViewGetView) {
  'use strict';

  /**
   * Materializedview service.
   * @module client.api/MaterializedviewApi
   * @version 0.5
   */

  /**
   * Constructs a new MaterializedviewApi. 
   * @alias module:client.api/MaterializedviewApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createView operation.
     * @callback module:client.api/MaterializedviewApi~createViewCallback
     * @param {String} error Error message, if any.
     * @param {module:client.model/SuccessMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create view
     * 
     * @param {module:client.model/MaterializedView} materializedView 
     * @param {module:client.api/MaterializedviewApi~createViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:client.model/SuccessMessage}
     */
    this.createView = function(materializedView, callback) {
      var postBody = materializedView;

      // verify the required parameter 'materializedView' is set
      if (materializedView == undefined || materializedView == null) {
        throw "Missing the required parameter 'materializedView' when calling createView";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['master_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessMessage;

      return this.apiClient.callApi(
        '/materialized-view/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteView operation.
     * @callback module:client.api/MaterializedviewApi~deleteViewCallback
     * @param {String} error Error message, if any.
     * @param {module:client.model/SuccessMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete materialized view
     * 
     * @param {module:client.model/MaterializedViewDeleteView} materializedViewDeleteView 
     * @param {module:client.api/MaterializedviewApi~deleteViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:client.model/SuccessMessage}
     */
    this.deleteView = function(materializedViewDeleteView, callback) {
      var postBody = materializedViewDeleteView;

      // verify the required parameter 'materializedViewDeleteView' is set
      if (materializedViewDeleteView == undefined || materializedViewDeleteView == null) {
        throw "Missing the required parameter 'materializedViewDeleteView' when calling deleteView";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['master_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessMessage;

      return this.apiClient.callApi(
        '/materialized-view/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchemaOfView operation.
     * @callback module:client.api/MaterializedviewApi~getSchemaOfViewCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:client.model/MaterializedViewSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get schemas
     * 
     * @param {module:client.model/MaterializedViewGetSchemaOfView} materializedViewGetSchemaOfView 
     * @param {module:client.api/MaterializedviewApi~getSchemaOfViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:client.model/MaterializedViewSchema>}
     */
    this.getSchemaOfView = function(materializedViewGetSchemaOfView, callback) {
      var postBody = materializedViewGetSchemaOfView;

      // verify the required parameter 'materializedViewGetSchemaOfView' is set
      if (materializedViewGetSchemaOfView == undefined || materializedViewGetSchemaOfView == null) {
        throw "Missing the required parameter 'materializedViewGetSchemaOfView' when calling getSchemaOfView";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['read_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [MaterializedViewSchema];

      return this.apiClient.callApi(
        '/materialized-view/schema', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getView operation.
     * @callback module:client.api/MaterializedviewApi~getViewCallback
     * @param {String} error Error message, if any.
     * @param {module:client.model/MaterializedView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get view
     * 
     * @param {module:client.model/MaterializedViewGetView} materializedViewGetView 
     * @param {module:client.api/MaterializedviewApi~getViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:client.model/MaterializedView}
     */
    this.getView = function(materializedViewGetView, callback) {
      var postBody = materializedViewGetView;

      // verify the required parameter 'materializedViewGetView' is set
      if (materializedViewGetView == undefined || materializedViewGetView == null) {
        throw "Missing the required parameter 'materializedViewGetView' when calling getView";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['read_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MaterializedView;

      return this.apiClient.callApi(
        '/materialized-view/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listViews operation.
     * @callback module:client.api/MaterializedviewApi~listViewsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:client.model/MaterializedView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List views
     * 
     * @param {module:client.api/MaterializedviewApi~listViewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:client.model/MaterializedView>}
     */
    this.listViews = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['read_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [MaterializedView];

      return this.apiClient.callApi(
        '/materialized-view/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
