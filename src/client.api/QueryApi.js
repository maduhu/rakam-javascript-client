/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'client.model/QueryResult', 'client.model/Execute', 'client.model/ErrorMessage', 'client.model/Explain', 'client.model/ResponseQuery', 'client.model/SchemaField', 'client.model/QueryMetadata'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../client.model/QueryResult'), require('../client.model/Execute'), require('../client.model/ErrorMessage'), require('../client.model/Explain'), require('../client.model/ResponseQuery'), require('../client.model/SchemaField'), require('../client.model/QueryMetadata'));
  } else {
    // Browser globals (root is window)
    if (!root.RakamClient) {
      root.RakamClient = {};
    }
    root.RakamClient.QueryApi = factory(root.RakamClient.ApiClient, root.RakamClient.QueryResult, root.RakamClient.Execute, root.RakamClient.ErrorMessage, root.RakamClient.Explain, root.RakamClient.ResponseQuery, root.RakamClient.SchemaField, root.RakamClient.QueryMetadata);
  }
}(this, function(ApiClient, QueryResult, Execute, ErrorMessage, Explain, ResponseQuery, SchemaField, QueryMetadata) {
  'use strict';

  /**
   * Query service.
   * @module client.api/QueryApi
   * @version 0.5
   */

  /**
   * Constructs a new QueryApi. 
   * @alias module:client.api/QueryApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the execute operation.
     * @callback module:client.api/QueryApi~executeCallback
     * @param {String} error Error message, if any.
     * @param {module:client.model/QueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute query on event data-set
     * 
     * @param {module:client.model/Execute} execute 
     * @param {module:client.api/QueryApi~executeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:client.model/QueryResult}
     */
    this.execute = function(execute, callback) {
      var postBody = execute;

      // verify the required parameter 'execute' is set
      if (execute == undefined || execute == null) {
        throw "Missing the required parameter 'execute' when calling execute";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['read_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QueryResult;

      return this.apiClient.callApi(
        '/query/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the explain operation.
     * @callback module:client.api/QueryApi~explainCallback
     * @param {String} error Error message, if any.
     * @param {module:client.model/ResponseQuery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Explain query
     * 
     * @param {module:client.model/Explain} explain 
     * @param {module:client.api/QueryApi~explainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:client.model/ResponseQuery}
     */
    this.explain = function(explain, callback) {
      var postBody = explain;

      // verify the required parameter 'explain' is set
      if (explain == undefined || explain == null) {
        throw "Missing the required parameter 'explain' when calling explain";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['read_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResponseQuery;

      return this.apiClient.callApi(
        '/query/explain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metadata operation.
     * @callback module:client.api/QueryApi~metadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:client.model/SchemaField>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test query
     * 
     * @param {module:client.model/QueryMetadata} queryMetadata 
     * @param {module:client.api/QueryApi~metadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:client.model/SchemaField>}
     */
    this.metadata = function(queryMetadata, callback) {
      var postBody = queryMetadata;

      // verify the required parameter 'queryMetadata' is set
      if (queryMetadata == undefined || queryMetadata == null) {
        throw "Missing the required parameter 'queryMetadata' when calling metadata";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['read_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [SchemaField];

      return this.apiClient.callApi(
        '/query/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
