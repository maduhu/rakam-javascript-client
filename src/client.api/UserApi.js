/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'client.model/UserCreateSegment', 'client.model/SuccessMessage', 'client.model/ErrorMessage', 'client.model/User', 'client.model/UserCreateUsers', 'client.model/CollectionEvent', 'client.model/UserGetEvents', 'client.model/MetadataResponse', 'client.model/UserGetUser', 'client.model/UserIncrementProperty', 'client.model/QueryResult', 'client.model/UserSearchUsers', 'client.model/UserUnsetProperty'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../client.model/UserCreateSegment'), require('../client.model/SuccessMessage'), require('../client.model/ErrorMessage'), require('../client.model/User'), require('../client.model/UserCreateUsers'), require('../client.model/CollectionEvent'), require('../client.model/UserGetEvents'), require('../client.model/MetadataResponse'), require('../client.model/UserGetUser'), require('../client.model/UserIncrementProperty'), require('../client.model/QueryResult'), require('../client.model/UserSearchUsers'), require('../client.model/UserUnsetProperty'));
  } else {
    // Browser globals (root is window)
    if (!root.RakamClient) {
      root.RakamClient = {};
    }
    root.RakamClient.UserApi = factory(root.RakamClient.ApiClient, root.RakamClient.UserCreateSegment, root.RakamClient.SuccessMessage, root.RakamClient.ErrorMessage, root.RakamClient.User, root.RakamClient.UserCreateUsers, root.RakamClient.CollectionEvent, root.RakamClient.UserGetEvents, root.RakamClient.MetadataResponse, root.RakamClient.UserGetUser, root.RakamClient.UserIncrementProperty, root.RakamClient.QueryResult, root.RakamClient.UserSearchUsers, root.RakamClient.UserUnsetProperty);
  }
}(this, function(ApiClient, UserCreateSegment, SuccessMessage, ErrorMessage, User, UserCreateUsers, CollectionEvent, UserGetEvents, MetadataResponse, UserGetUser, UserIncrementProperty, QueryResult, UserSearchUsers, UserUnsetProperty) {
  'use strict';

  /**
   * User service.
   * @module client.api/UserApi
   * @version 0.5
   */

  /**
   * Constructs a new UserApi. 
   * @alias module:client.api/UserApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createSegment operation.
     * @callback module:client.api/UserApi~createSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:client.model/SuccessMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get events of the user
     * 
     * @param {module:client.model/UserCreateSegment} userCreateSegment 
     * @param {module:client.api/UserApi~createSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:client.model/SuccessMessage}
     */
    this.createSegment = function(userCreateSegment, callback) {
      var postBody = userCreateSegment;

      // verify the required parameter 'userCreateSegment' is set
      if (userCreateSegment == undefined || userCreateSegment == null) {
        throw "Missing the required parameter 'userCreateSegment' when calling createSegment";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['read_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessMessage;

      return this.apiClient.callApi(
        '/user/create_segment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:client.api/UserApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {'Integer'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new user
     * 
     * @param {module:client.model/User} user 
     * @param {module:client.api/UserApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {'Integer'}
     */
    this.createUser = function(user, callback) {
      var postBody = user;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw "Missing the required parameter 'user' when calling createUser";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Integer';

      return this.apiClient.callApi(
        '/user/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUsers operation.
     * @callback module:client.api/UserApi~createUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create multiple new users
     * Returns user ids. User id may be string or numeric.
     * @param {module:client.model/UserCreateUsers} userCreateUsers 
     * @param {module:client.api/UserApi~createUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<Object>}
     */
    this.createUsers = function(userCreateUsers, callback) {
      var postBody = userCreateUsers;

      // verify the required parameter 'userCreateUsers' is set
      if (userCreateUsers == undefined || userCreateUsers == null) {
        throw "Missing the required parameter 'userCreateUsers' when calling createUsers";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['write_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/user/batch/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvents operation.
     * @callback module:client.api/UserApi~getEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:client.model/CollectionEvent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get events of the user
     * 
     * @param {module:client.model/UserGetEvents} userGetEvents 
     * @param {module:client.api/UserApi~getEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:client.model/CollectionEvent>}
     */
    this.getEvents = function(userGetEvents, callback) {
      var postBody = userGetEvents;

      // verify the required parameter 'userGetEvents' is set
      if (userGetEvents == undefined || userGetEvents == null) {
        throw "Missing the required parameter 'userGetEvents' when calling getEvents";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['read_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CollectionEvent];

      return this.apiClient.callApi(
        '/user/get_events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetadata operation.
     * @callback module:client.api/UserApi~getMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:client.model/MetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user storage metadata
     * 
     * @param {module:client.api/UserApi~getMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:client.model/MetadataResponse}
     */
    this.getMetadata = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['read_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetadataResponse;

      return this.apiClient.callApi(
        '/user/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:client.api/UserApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:client.model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user
     * 
     * @param {module:client.model/UserGetUser} userGetUser 
     * @param {module:client.api/UserApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:client.model/User}
     */
    this.getUser = function(userGetUser, callback) {
      var postBody = userGetUser;

      // verify the required parameter 'userGetUser' is set
      if (userGetUser == undefined || userGetUser == null) {
        throw "Missing the required parameter 'userGetUser' when calling getUser";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['read_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/user/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the incrementProperty operation.
     * @callback module:client.api/UserApi~incrementPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:client.model/SuccessMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set user property
     * 
     * @param {module:client.model/UserIncrementProperty} userIncrementProperty 
     * @param {module:client.api/UserApi~incrementPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:client.model/SuccessMessage}
     */
    this.incrementProperty = function(userIncrementProperty, callback) {
      var postBody = userIncrementProperty;

      // verify the required parameter 'userIncrementProperty' is set
      if (userIncrementProperty == undefined || userIncrementProperty == null) {
        throw "Missing the required parameter 'userIncrementProperty' when calling incrementProperty";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['master_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessMessage;

      return this.apiClient.callApi(
        '/user/increment_property', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUsers operation.
     * @callback module:client.api/UserApi~searchUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:client.model/QueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search users
     * 
     * @param {module:client.model/UserSearchUsers} userSearchUsers 
     * @param {module:client.api/UserApi~searchUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:client.model/QueryResult}
     */
    this.searchUsers = function(userSearchUsers, callback) {
      var postBody = userSearchUsers;

      // verify the required parameter 'userSearchUsers' is set
      if (userSearchUsers == undefined || userSearchUsers == null) {
        throw "Missing the required parameter 'userSearchUsers' when calling searchUsers";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['read_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QueryResult;

      return this.apiClient.callApi(
        '/user/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setProperties operation.
     * @callback module:client.api/UserApi~setPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {'Integer'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set user properties
     * 
     * @param {module:client.model/User} user 
     * @param {module:client.api/UserApi~setPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {'Integer'}
     */
    this.setProperties = function(user, callback) {
      var postBody = user;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw "Missing the required parameter 'user' when calling setProperties";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Integer';

      return this.apiClient.callApi(
        '/user/set_properties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setPropertiesOnce operation.
     * @callback module:client.api/UserApi~setPropertiesOnceCallback
     * @param {String} error Error message, if any.
     * @param {'Integer'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set user properties once
     * 
     * @param {module:client.model/User} user 
     * @param {module:client.api/UserApi~setPropertiesOnceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {'Integer'}
     */
    this.setPropertiesOnce = function(user, callback) {
      var postBody = user;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw "Missing the required parameter 'user' when calling setPropertiesOnce";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Integer';

      return this.apiClient.callApi(
        '/user/set_properties_once', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unsetProperty operation.
     * @callback module:client.api/UserApi~unsetPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:client.model/SuccessMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unset user property
     * 
     * @param {module:client.model/UserUnsetProperty} userUnsetProperty 
     * @param {module:client.api/UserApi~unsetPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:client.model/SuccessMessage}
     */
    this.unsetProperty = function(userUnsetProperty, callback) {
      var postBody = userUnsetProperty;

      // verify the required parameter 'userUnsetProperty' is set
      if (userUnsetProperty == undefined || userUnsetProperty == null) {
        throw "Missing the required parameter 'userUnsetProperty' when calling unsetProperty";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessMessage;

      return this.apiClient.callApi(
        '/user/unset_properties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
