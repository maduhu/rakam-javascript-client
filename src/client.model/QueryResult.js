/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'client.model/QueryError', 'client.model/SchemaField'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./QueryError'), require('./SchemaField'));
  } else {
    // Browser globals (root is window)
    if (!root.RakamClient) {
      root.RakamClient = {};
    }
    root.RakamClient.QueryResult = factory(root.RakamClient.ApiClient, root.RakamClient.QueryError, root.RakamClient.SchemaField);
  }
}(this, function(ApiClient, QueryError, SchemaField) {
  'use strict';




  /**
   * The QueryResult model module.
   * @module client.model/QueryResult
   * @version 0.5
   */

  /**
   * Constructs a new <code>QueryResult</code>.
   * @alias module:client.model/QueryResult
   * @class
   * @param metadata {Array.<module:client.model/SchemaField>} 
   * @param error {module:client.model/QueryError} 
   * @param properties {Object.<String, Object>} 
   */
  var exports = function(metadata, error, properties) {
    var _this = this;

    _this['metadata'] = metadata;

    _this['error'] = error;
    _this['properties'] = properties;

  };

  /**
   * Constructs a <code>QueryResult</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:client.model/QueryResult} obj Optional instance to populate.
   * @return {module:client.model/QueryResult} The populated <code>QueryResult</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('metadata')) {
        obj['metadata'] = ApiClient.convertToType(data['metadata'], [SchemaField]);
      }
      if (data.hasOwnProperty('result')) {
        obj['result'] = ApiClient.convertToType(data['result'], [[Object]]);
      }
      if (data.hasOwnProperty('error')) {
        obj['error'] = QueryError.constructFromObject(data['error']);
      }
      if (data.hasOwnProperty('properties')) {
        obj['properties'] = ApiClient.convertToType(data['properties'], {'String': Object});
      }
      if (data.hasOwnProperty('failed')) {
        obj['failed'] = ApiClient.convertToType(data['failed'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * @member {Array.<module:client.model/SchemaField>} metadata
   */
  exports.prototype['metadata'] = undefined;
  /**
   * Each row is an array that contains the values for the columns that are defined in metadata property.
   * @member {Array.<Array.<Object>>} result
   */
  exports.prototype['result'] = undefined;
  /**
   * @member {module:client.model/QueryError} error
   */
  exports.prototype['error'] = undefined;
  /**
   * @member {Object.<String, Object>} properties
   */
  exports.prototype['properties'] = undefined;
  /**
   * @member {Boolean} failed
   * @default false
   */
  exports.prototype['failed'] = false;



  return exports;
}));


