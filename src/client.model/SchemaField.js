/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.RakamClient) {
      root.RakamClient = {};
    }
    root.RakamClient.SchemaField = factory(root.RakamClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The SchemaField model module.
   * @module client.model/SchemaField
   * @version 0.5
   */

  /**
   * Constructs a new <code>SchemaField</code>.
   * @alias module:client.model/SchemaField
   * @class
   */
  var exports = function() {
    var _this = this;







  };

  /**
   * Constructs a <code>SchemaField</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:client.model/SchemaField} obj Optional instance to populate.
   * @return {module:client.model/SchemaField} The populated <code>SchemaField</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('unique')) {
        obj['unique'] = ApiClient.convertToType(data['unique'], 'Boolean');
      }
      if (data.hasOwnProperty('descriptiveName')) {
        obj['descriptiveName'] = ApiClient.convertToType(data['descriptiveName'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('category')) {
        obj['category'] = ApiClient.convertToType(data['category'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * @member {module:client.model/SchemaField.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * @member {Boolean} unique
   * @default false
   */
  exports.prototype['unique'] = false;
  /**
   * @member {String} descriptiveName
   */
  exports.prototype['descriptiveName'] = undefined;
  /**
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * @member {String} category
   */
  exports.prototype['category'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",
    /**
     * value: "INTEGER"
     * @const
     */
    "INTEGER": "INTEGER",
    /**
     * value: "DECIMAL"
     * @const
     */
    "DECIMAL": "DECIMAL",
    /**
     * value: "DOUBLE"
     * @const
     */
    "DOUBLE": "DOUBLE",
    /**
     * value: "LONG"
     * @const
     */
    "LONG": "LONG",
    /**
     * value: "BOOLEAN"
     * @const
     */
    "BOOLEAN": "BOOLEAN",
    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",
    /**
     * value: "TIME"
     * @const
     */
    "TIME": "TIME",
    /**
     * value: "TIMESTAMP"
     * @const
     */
    "TIMESTAMP": "TIMESTAMP",
    /**
     * value: "BINARY"
     * @const
     */
    "BINARY": "BINARY",
    /**
     * value: "ARRAY_STRING"
     * @const
     */
    "ARRAY_STRING": "ARRAY_STRING",
    /**
     * value: "ARRAY_INTEGER"
     * @const
     */
    "ARRAY_INTEGER": "ARRAY_INTEGER",
    /**
     * value: "ARRAY_DECIMAL"
     * @const
     */
    "ARRAY_DECIMAL": "ARRAY_DECIMAL",
    /**
     * value: "ARRAY_DOUBLE"
     * @const
     */
    "ARRAY_DOUBLE": "ARRAY_DOUBLE",
    /**
     * value: "ARRAY_LONG"
     * @const
     */
    "ARRAY_LONG": "ARRAY_LONG",
    /**
     * value: "ARRAY_BOOLEAN"
     * @const
     */
    "ARRAY_BOOLEAN": "ARRAY_BOOLEAN",
    /**
     * value: "ARRAY_DATE"
     * @const
     */
    "ARRAY_DATE": "ARRAY_DATE",
    /**
     * value: "ARRAY_TIME"
     * @const
     */
    "ARRAY_TIME": "ARRAY_TIME",
    /**
     * value: "ARRAY_TIMESTAMP"
     * @const
     */
    "ARRAY_TIMESTAMP": "ARRAY_TIMESTAMP",
    /**
     * value: "ARRAY_BINARY"
     * @const
     */
    "ARRAY_BINARY": "ARRAY_BINARY",
    /**
     * value: "MAP_STRING"
     * @const
     */
    "MAP_STRING": "MAP_STRING",
    /**
     * value: "MAP_INTEGER"
     * @const
     */
    "MAP_INTEGER": "MAP_INTEGER",
    /**
     * value: "MAP_DECIMAL"
     * @const
     */
    "MAP_DECIMAL": "MAP_DECIMAL",
    /**
     * value: "MAP_DOUBLE"
     * @const
     */
    "MAP_DOUBLE": "MAP_DOUBLE",
    /**
     * value: "MAP_LONG"
     * @const
     */
    "MAP_LONG": "MAP_LONG",
    /**
     * value: "MAP_BOOLEAN"
     * @const
     */
    "MAP_BOOLEAN": "MAP_BOOLEAN",
    /**
     * value: "MAP_DATE"
     * @const
     */
    "MAP_DATE": "MAP_DATE",
    /**
     * value: "MAP_TIME"
     * @const
     */
    "MAP_TIME": "MAP_TIME",
    /**
     * value: "MAP_TIMESTAMP"
     * @const
     */
    "MAP_TIMESTAMP": "MAP_TIMESTAMP",
    /**
     * value: "MAP_BINARY"
     * @const
     */
    "MAP_BINARY": "MAP_BINARY"  };


  return exports;
}));


