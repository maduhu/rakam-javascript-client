/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'client.model/AnalyzeRequest', 'client.model/BulkEventRemote', 'client.model/CheckLockKey', 'client.model/Collection', 'client.model/CollectionDefinition', 'client.model/CollectionEvent', 'client.model/CommitBulkEvents', 'client.model/CommitRequest', 'client.model/Condition', 'client.model/ConfigItem', 'client.model/ContinuousQuery', 'client.model/ContinuousQueryDeleteQuery', 'client.model/ContinuousQueryGetQuery', 'client.model/ContinuousQueryGetSchemaOfQuery', 'client.model/ContinuousQueryTestQuery', 'client.model/CreatePrecomputedTable', 'client.model/CreateProject', 'client.model/EmailActionConfig', 'client.model/ErrorMessage', 'client.model/Event', 'client.model/EventContext', 'client.model/EventExplorerGetEventStatistics', 'client.model/EventFilter', 'client.model/EventFilterAggregation', 'client.model/EventList', 'client.model/Execute', 'client.model/Explain', 'client.model/ExportQuery', 'client.model/FunnelQuery', 'client.model/FunnelStep', 'client.model/FunnelWindow', 'client.model/GroupBy', 'client.model/Library', 'client.model/MappingPlugin', 'client.model/MaterializedView', 'client.model/MaterializedViewDeleteView', 'client.model/MaterializedViewGetSchemaOfView', 'client.model/MaterializedViewGetView', 'client.model/MaterializedViewSchema', 'client.model/Measure', 'client.model/MetadataResponse', 'client.model/ModuleDescriptor', 'client.model/OLAPTable', 'client.model/Ordering', 'client.model/PrecalculatedTable', 'client.model/ProjectAddCustomFieldsToSchema', 'client.model/ProjectAddFieldsToSchema', 'client.model/ProjectApiKeys', 'client.model/ProjectCheckApiKeys', 'client.model/ProjectGetStats', 'client.model/ProjectSchema', 'client.model/QueryError', 'client.model/QueryMetadata', 'client.model/QueryResult', 'client.model/RealTimeQueryResult', 'client.model/RealTimeReport', 'client.model/RealtimeDeleteTable', 'client.model/RealtimeQueryTable', 'client.model/Recipe', 'client.model/Reference', 'client.model/ResponseQuery', 'client.model/RetentionAction', 'client.model/RetentionQuery', 'client.model/SchemaField', 'client.model/SchemaFieldInfo', 'client.model/Sorting', 'client.model/Stats', 'client.model/SuccessMessage', 'client.model/Timeframe', 'client.model/User', 'client.model/UserContext', 'client.model/UserCreateSegment', 'client.model/UserCreateUsers', 'client.model/UserEmailActionBatch', 'client.model/UserEmailActionSend', 'client.model/UserGetEvents', 'client.model/UserGetUser', 'client.model/UserIncrementProperty', 'client.model/UserSearchUsers', 'client.model/UserUnsetProperty', 'client.api/AdminApi', 'client.api/CollectApi', 'client.api/ContinuousqueryApi', 'client.api/EventexplorerApi', 'client.api/FunnelApi', 'client.api/MaterializedviewApi', 'client.api/QueryApi', 'client.api/RealtimeApi', 'client.api/RecipeApi', 'client.api/RetentionApi', 'client.api/UserApi', 'client.api/UseractionApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./client.model/AnalyzeRequest'), require('./client.model/BulkEventRemote'), require('./client.model/CheckLockKey'), require('./client.model/Collection'), require('./client.model/CollectionDefinition'), require('./client.model/CollectionEvent'), require('./client.model/CommitBulkEvents'), require('./client.model/CommitRequest'), require('./client.model/Condition'), require('./client.model/ConfigItem'), require('./client.model/ContinuousQuery'), require('./client.model/ContinuousQueryDeleteQuery'), require('./client.model/ContinuousQueryGetQuery'), require('./client.model/ContinuousQueryGetSchemaOfQuery'), require('./client.model/ContinuousQueryTestQuery'), require('./client.model/CreatePrecomputedTable'), require('./client.model/CreateProject'), require('./client.model/EmailActionConfig'), require('./client.model/ErrorMessage'), require('./client.model/Event'), require('./client.model/EventContext'), require('./client.model/EventExplorerGetEventStatistics'), require('./client.model/EventFilter'), require('./client.model/EventFilterAggregation'), require('./client.model/EventList'), require('./client.model/Execute'), require('./client.model/Explain'), require('./client.model/ExportQuery'), require('./client.model/FunnelQuery'), require('./client.model/FunnelStep'), require('./client.model/FunnelWindow'), require('./client.model/GroupBy'), require('./client.model/Library'), require('./client.model/MappingPlugin'), require('./client.model/MaterializedView'), require('./client.model/MaterializedViewDeleteView'), require('./client.model/MaterializedViewGetSchemaOfView'), require('./client.model/MaterializedViewGetView'), require('./client.model/MaterializedViewSchema'), require('./client.model/Measure'), require('./client.model/MetadataResponse'), require('./client.model/ModuleDescriptor'), require('./client.model/OLAPTable'), require('./client.model/Ordering'), require('./client.model/PrecalculatedTable'), require('./client.model/ProjectAddCustomFieldsToSchema'), require('./client.model/ProjectAddFieldsToSchema'), require('./client.model/ProjectApiKeys'), require('./client.model/ProjectCheckApiKeys'), require('./client.model/ProjectGetStats'), require('./client.model/ProjectSchema'), require('./client.model/QueryError'), require('./client.model/QueryMetadata'), require('./client.model/QueryResult'), require('./client.model/RealTimeQueryResult'), require('./client.model/RealTimeReport'), require('./client.model/RealtimeDeleteTable'), require('./client.model/RealtimeQueryTable'), require('./client.model/Recipe'), require('./client.model/Reference'), require('./client.model/ResponseQuery'), require('./client.model/RetentionAction'), require('./client.model/RetentionQuery'), require('./client.model/SchemaField'), require('./client.model/SchemaFieldInfo'), require('./client.model/Sorting'), require('./client.model/Stats'), require('./client.model/SuccessMessage'), require('./client.model/Timeframe'), require('./client.model/User'), require('./client.model/UserContext'), require('./client.model/UserCreateSegment'), require('./client.model/UserCreateUsers'), require('./client.model/UserEmailActionBatch'), require('./client.model/UserEmailActionSend'), require('./client.model/UserGetEvents'), require('./client.model/UserGetUser'), require('./client.model/UserIncrementProperty'), require('./client.model/UserSearchUsers'), require('./client.model/UserUnsetProperty'), require('./client.api/AdminApi'), require('./client.api/CollectApi'), require('./client.api/ContinuousqueryApi'), require('./client.api/EventexplorerApi'), require('./client.api/FunnelApi'), require('./client.api/MaterializedviewApi'), require('./client.api/QueryApi'), require('./client.api/RealtimeApi'), require('./client.api/RecipeApi'), require('./client.api/RetentionApi'), require('./client.api/UserApi'), require('./client.api/UseractionApi'));
  }
}(function(ApiClient, AnalyzeRequest, BulkEventRemote, CheckLockKey, Collection, CollectionDefinition, CollectionEvent, CommitBulkEvents, CommitRequest, Condition, ConfigItem, ContinuousQuery, ContinuousQueryDeleteQuery, ContinuousQueryGetQuery, ContinuousQueryGetSchemaOfQuery, ContinuousQueryTestQuery, CreatePrecomputedTable, CreateProject, EmailActionConfig, ErrorMessage, Event, EventContext, EventExplorerGetEventStatistics, EventFilter, EventFilterAggregation, EventList, Execute, Explain, ExportQuery, FunnelQuery, FunnelStep, FunnelWindow, GroupBy, Library, MappingPlugin, MaterializedView, MaterializedViewDeleteView, MaterializedViewGetSchemaOfView, MaterializedViewGetView, MaterializedViewSchema, Measure, MetadataResponse, ModuleDescriptor, OLAPTable, Ordering, PrecalculatedTable, ProjectAddCustomFieldsToSchema, ProjectAddFieldsToSchema, ProjectApiKeys, ProjectCheckApiKeys, ProjectGetStats, ProjectSchema, QueryError, QueryMetadata, QueryResult, RealTimeQueryResult, RealTimeReport, RealtimeDeleteTable, RealtimeQueryTable, Recipe, Reference, ResponseQuery, RetentionAction, RetentionQuery, SchemaField, SchemaFieldInfo, Sorting, Stats, SuccessMessage, Timeframe, User, UserContext, UserCreateSegment, UserCreateUsers, UserEmailActionBatch, UserEmailActionSend, UserGetEvents, UserGetUser, UserIncrementProperty, UserSearchUsers, UserUnsetProperty, AdminApi, CollectApi, ContinuousqueryApi, EventexplorerApi, FunnelApi, MaterializedviewApi, QueryApi, RealtimeApi, RecipeApi, RetentionApi, UserApi, UseractionApi) {
  'use strict';

  /**
   * An_analytics_platform_API_that_lets_you_create_your_own_analytics_services_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var RakamClient = require('index'); // See note below*.
   * var xxxSvc = new RakamClient.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new RakamClient.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new RakamClient.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new RakamClient.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 0.5
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AnalyzeRequest model constructor.
     * @property {module:client.model/AnalyzeRequest}
     */
    AnalyzeRequest: AnalyzeRequest,
    /**
     * The BulkEventRemote model constructor.
     * @property {module:client.model/BulkEventRemote}
     */
    BulkEventRemote: BulkEventRemote,
    /**
     * The CheckLockKey model constructor.
     * @property {module:client.model/CheckLockKey}
     */
    CheckLockKey: CheckLockKey,
    /**
     * The Collection model constructor.
     * @property {module:client.model/Collection}
     */
    Collection: Collection,
    /**
     * The CollectionDefinition model constructor.
     * @property {module:client.model/CollectionDefinition}
     */
    CollectionDefinition: CollectionDefinition,
    /**
     * The CollectionEvent model constructor.
     * @property {module:client.model/CollectionEvent}
     */
    CollectionEvent: CollectionEvent,
    /**
     * The CommitBulkEvents model constructor.
     * @property {module:client.model/CommitBulkEvents}
     */
    CommitBulkEvents: CommitBulkEvents,
    /**
     * The CommitRequest model constructor.
     * @property {module:client.model/CommitRequest}
     */
    CommitRequest: CommitRequest,
    /**
     * The Condition model constructor.
     * @property {module:client.model/Condition}
     */
    Condition: Condition,
    /**
     * The ConfigItem model constructor.
     * @property {module:client.model/ConfigItem}
     */
    ConfigItem: ConfigItem,
    /**
     * The ContinuousQuery model constructor.
     * @property {module:client.model/ContinuousQuery}
     */
    ContinuousQuery: ContinuousQuery,
    /**
     * The ContinuousQueryDeleteQuery model constructor.
     * @property {module:client.model/ContinuousQueryDeleteQuery}
     */
    ContinuousQueryDeleteQuery: ContinuousQueryDeleteQuery,
    /**
     * The ContinuousQueryGetQuery model constructor.
     * @property {module:client.model/ContinuousQueryGetQuery}
     */
    ContinuousQueryGetQuery: ContinuousQueryGetQuery,
    /**
     * The ContinuousQueryGetSchemaOfQuery model constructor.
     * @property {module:client.model/ContinuousQueryGetSchemaOfQuery}
     */
    ContinuousQueryGetSchemaOfQuery: ContinuousQueryGetSchemaOfQuery,
    /**
     * The ContinuousQueryTestQuery model constructor.
     * @property {module:client.model/ContinuousQueryTestQuery}
     */
    ContinuousQueryTestQuery: ContinuousQueryTestQuery,
    /**
     * The CreatePrecomputedTable model constructor.
     * @property {module:client.model/CreatePrecomputedTable}
     */
    CreatePrecomputedTable: CreatePrecomputedTable,
    /**
     * The CreateProject model constructor.
     * @property {module:client.model/CreateProject}
     */
    CreateProject: CreateProject,
    /**
     * The EmailActionConfig model constructor.
     * @property {module:client.model/EmailActionConfig}
     */
    EmailActionConfig: EmailActionConfig,
    /**
     * The ErrorMessage model constructor.
     * @property {module:client.model/ErrorMessage}
     */
    ErrorMessage: ErrorMessage,
    /**
     * The Event model constructor.
     * @property {module:client.model/Event}
     */
    Event: Event,
    /**
     * The EventContext model constructor.
     * @property {module:client.model/EventContext}
     */
    EventContext: EventContext,
    /**
     * The EventExplorerGetEventStatistics model constructor.
     * @property {module:client.model/EventExplorerGetEventStatistics}
     */
    EventExplorerGetEventStatistics: EventExplorerGetEventStatistics,
    /**
     * The EventFilter model constructor.
     * @property {module:client.model/EventFilter}
     */
    EventFilter: EventFilter,
    /**
     * The EventFilterAggregation model constructor.
     * @property {module:client.model/EventFilterAggregation}
     */
    EventFilterAggregation: EventFilterAggregation,
    /**
     * The EventList model constructor.
     * @property {module:client.model/EventList}
     */
    EventList: EventList,
    /**
     * The Execute model constructor.
     * @property {module:client.model/Execute}
     */
    Execute: Execute,
    /**
     * The Explain model constructor.
     * @property {module:client.model/Explain}
     */
    Explain: Explain,
    /**
     * The ExportQuery model constructor.
     * @property {module:client.model/ExportQuery}
     */
    ExportQuery: ExportQuery,
    /**
     * The FunnelQuery model constructor.
     * @property {module:client.model/FunnelQuery}
     */
    FunnelQuery: FunnelQuery,
    /**
     * The FunnelStep model constructor.
     * @property {module:client.model/FunnelStep}
     */
    FunnelStep: FunnelStep,
    /**
     * The FunnelWindow model constructor.
     * @property {module:client.model/FunnelWindow}
     */
    FunnelWindow: FunnelWindow,
    /**
     * The GroupBy model constructor.
     * @property {module:client.model/GroupBy}
     */
    GroupBy: GroupBy,
    /**
     * The Library model constructor.
     * @property {module:client.model/Library}
     */
    Library: Library,
    /**
     * The MappingPlugin model constructor.
     * @property {module:client.model/MappingPlugin}
     */
    MappingPlugin: MappingPlugin,
    /**
     * The MaterializedView model constructor.
     * @property {module:client.model/MaterializedView}
     */
    MaterializedView: MaterializedView,
    /**
     * The MaterializedViewDeleteView model constructor.
     * @property {module:client.model/MaterializedViewDeleteView}
     */
    MaterializedViewDeleteView: MaterializedViewDeleteView,
    /**
     * The MaterializedViewGetSchemaOfView model constructor.
     * @property {module:client.model/MaterializedViewGetSchemaOfView}
     */
    MaterializedViewGetSchemaOfView: MaterializedViewGetSchemaOfView,
    /**
     * The MaterializedViewGetView model constructor.
     * @property {module:client.model/MaterializedViewGetView}
     */
    MaterializedViewGetView: MaterializedViewGetView,
    /**
     * The MaterializedViewSchema model constructor.
     * @property {module:client.model/MaterializedViewSchema}
     */
    MaterializedViewSchema: MaterializedViewSchema,
    /**
     * The Measure model constructor.
     * @property {module:client.model/Measure}
     */
    Measure: Measure,
    /**
     * The MetadataResponse model constructor.
     * @property {module:client.model/MetadataResponse}
     */
    MetadataResponse: MetadataResponse,
    /**
     * The ModuleDescriptor model constructor.
     * @property {module:client.model/ModuleDescriptor}
     */
    ModuleDescriptor: ModuleDescriptor,
    /**
     * The OLAPTable model constructor.
     * @property {module:client.model/OLAPTable}
     */
    OLAPTable: OLAPTable,
    /**
     * The Ordering model constructor.
     * @property {module:client.model/Ordering}
     */
    Ordering: Ordering,
    /**
     * The PrecalculatedTable model constructor.
     * @property {module:client.model/PrecalculatedTable}
     */
    PrecalculatedTable: PrecalculatedTable,
    /**
     * The ProjectAddCustomFieldsToSchema model constructor.
     * @property {module:client.model/ProjectAddCustomFieldsToSchema}
     */
    ProjectAddCustomFieldsToSchema: ProjectAddCustomFieldsToSchema,
    /**
     * The ProjectAddFieldsToSchema model constructor.
     * @property {module:client.model/ProjectAddFieldsToSchema}
     */
    ProjectAddFieldsToSchema: ProjectAddFieldsToSchema,
    /**
     * The ProjectApiKeys model constructor.
     * @property {module:client.model/ProjectApiKeys}
     */
    ProjectApiKeys: ProjectApiKeys,
    /**
     * The ProjectCheckApiKeys model constructor.
     * @property {module:client.model/ProjectCheckApiKeys}
     */
    ProjectCheckApiKeys: ProjectCheckApiKeys,
    /**
     * The ProjectGetStats model constructor.
     * @property {module:client.model/ProjectGetStats}
     */
    ProjectGetStats: ProjectGetStats,
    /**
     * The ProjectSchema model constructor.
     * @property {module:client.model/ProjectSchema}
     */
    ProjectSchema: ProjectSchema,
    /**
     * The QueryError model constructor.
     * @property {module:client.model/QueryError}
     */
    QueryError: QueryError,
    /**
     * The QueryMetadata model constructor.
     * @property {module:client.model/QueryMetadata}
     */
    QueryMetadata: QueryMetadata,
    /**
     * The QueryResult model constructor.
     * @property {module:client.model/QueryResult}
     */
    QueryResult: QueryResult,
    /**
     * The RealTimeQueryResult model constructor.
     * @property {module:client.model/RealTimeQueryResult}
     */
    RealTimeQueryResult: RealTimeQueryResult,
    /**
     * The RealTimeReport model constructor.
     * @property {module:client.model/RealTimeReport}
     */
    RealTimeReport: RealTimeReport,
    /**
     * The RealtimeDeleteTable model constructor.
     * @property {module:client.model/RealtimeDeleteTable}
     */
    RealtimeDeleteTable: RealtimeDeleteTable,
    /**
     * The RealtimeQueryTable model constructor.
     * @property {module:client.model/RealtimeQueryTable}
     */
    RealtimeQueryTable: RealtimeQueryTable,
    /**
     * The Recipe model constructor.
     * @property {module:client.model/Recipe}
     */
    Recipe: Recipe,
    /**
     * The Reference model constructor.
     * @property {module:client.model/Reference}
     */
    Reference: Reference,
    /**
     * The ResponseQuery model constructor.
     * @property {module:client.model/ResponseQuery}
     */
    ResponseQuery: ResponseQuery,
    /**
     * The RetentionAction model constructor.
     * @property {module:client.model/RetentionAction}
     */
    RetentionAction: RetentionAction,
    /**
     * The RetentionQuery model constructor.
     * @property {module:client.model/RetentionQuery}
     */
    RetentionQuery: RetentionQuery,
    /**
     * The SchemaField model constructor.
     * @property {module:client.model/SchemaField}
     */
    SchemaField: SchemaField,
    /**
     * The SchemaFieldInfo model constructor.
     * @property {module:client.model/SchemaFieldInfo}
     */
    SchemaFieldInfo: SchemaFieldInfo,
    /**
     * The Sorting model constructor.
     * @property {module:client.model/Sorting}
     */
    Sorting: Sorting,
    /**
     * The Stats model constructor.
     * @property {module:client.model/Stats}
     */
    Stats: Stats,
    /**
     * The SuccessMessage model constructor.
     * @property {module:client.model/SuccessMessage}
     */
    SuccessMessage: SuccessMessage,
    /**
     * The Timeframe model constructor.
     * @property {module:client.model/Timeframe}
     */
    Timeframe: Timeframe,
    /**
     * The User model constructor.
     * @property {module:client.model/User}
     */
    User: User,
    /**
     * The UserContext model constructor.
     * @property {module:client.model/UserContext}
     */
    UserContext: UserContext,
    /**
     * The UserCreateSegment model constructor.
     * @property {module:client.model/UserCreateSegment}
     */
    UserCreateSegment: UserCreateSegment,
    /**
     * The UserCreateUsers model constructor.
     * @property {module:client.model/UserCreateUsers}
     */
    UserCreateUsers: UserCreateUsers,
    /**
     * The UserEmailActionBatch model constructor.
     * @property {module:client.model/UserEmailActionBatch}
     */
    UserEmailActionBatch: UserEmailActionBatch,
    /**
     * The UserEmailActionSend model constructor.
     * @property {module:client.model/UserEmailActionSend}
     */
    UserEmailActionSend: UserEmailActionSend,
    /**
     * The UserGetEvents model constructor.
     * @property {module:client.model/UserGetEvents}
     */
    UserGetEvents: UserGetEvents,
    /**
     * The UserGetUser model constructor.
     * @property {module:client.model/UserGetUser}
     */
    UserGetUser: UserGetUser,
    /**
     * The UserIncrementProperty model constructor.
     * @property {module:client.model/UserIncrementProperty}
     */
    UserIncrementProperty: UserIncrementProperty,
    /**
     * The UserSearchUsers model constructor.
     * @property {module:client.model/UserSearchUsers}
     */
    UserSearchUsers: UserSearchUsers,
    /**
     * The UserUnsetProperty model constructor.
     * @property {module:client.model/UserUnsetProperty}
     */
    UserUnsetProperty: UserUnsetProperty,
    /**
     * The AdminApi service constructor.
     * @property {module:client.api/AdminApi}
     */
    AdminApi: AdminApi,
    /**
     * The CollectApi service constructor.
     * @property {module:client.api/CollectApi}
     */
    CollectApi: CollectApi,
    /**
     * The ContinuousqueryApi service constructor.
     * @property {module:client.api/ContinuousqueryApi}
     */
    ContinuousqueryApi: ContinuousqueryApi,
    /**
     * The EventexplorerApi service constructor.
     * @property {module:client.api/EventexplorerApi}
     */
    EventexplorerApi: EventexplorerApi,
    /**
     * The FunnelApi service constructor.
     * @property {module:client.api/FunnelApi}
     */
    FunnelApi: FunnelApi,
    /**
     * The MaterializedviewApi service constructor.
     * @property {module:client.api/MaterializedviewApi}
     */
    MaterializedviewApi: MaterializedviewApi,
    /**
     * The QueryApi service constructor.
     * @property {module:client.api/QueryApi}
     */
    QueryApi: QueryApi,
    /**
     * The RealtimeApi service constructor.
     * @property {module:client.api/RealtimeApi}
     */
    RealtimeApi: RealtimeApi,
    /**
     * The RecipeApi service constructor.
     * @property {module:client.api/RecipeApi}
     */
    RecipeApi: RecipeApi,
    /**
     * The RetentionApi service constructor.
     * @property {module:client.api/RetentionApi}
     */
    RetentionApi: RetentionApi,
    /**
     * The UserApi service constructor.
     * @property {module:client.api/UserApi}
     */
    UserApi: UserApi,
    /**
     * The UseractionApi service constructor.
     * @property {module:client.api/UseractionApi}
     */
    UseractionApi: UseractionApi
  };

  return exports;
}));
